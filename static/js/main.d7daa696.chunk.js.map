{"version":3,"sources":["components/GameJoinInfo.tsx","components/Donate.tsx","components/HowToPlay.tsx","components/GhostNavbar.tsx","redux/player/actions.ts","pages/JoinGamePage.tsx","redux/api.ts","redux/games/actions.ts","components/GameTile.tsx","components/GameBoard.tsx","components/PlayersList.tsx","pages/GamePage.tsx","App.tsx","redux/games/reducers.ts","redux/player/reducers.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["GameJoinInfo","joinGame","useState","roomCode","setRoomCode","playerName","setPlayerName","nonemptyAlertIsOpen","setNonemptyAlertIsOpen","elevation","maxLength","onChange","event","target","value","placeholder","text","intent","Intent","PRIMARY","onClick","length","ensureNonemptyStrings","isOpen","onClose","canEscapeKeyCancel","canOutsideClickCancel","confirmButtonText","WARNING","Donate","icon","window","open","HowToPlay","setIsOpen","title","className","DIALOG_BODY","GhostNavbar","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","createAction","JoinGamePage","dispatch","useDispatch","history","useHistory","push","GHOST_API_URL","process","console","log","ghostApi","axios","create","baseURL","fetchGameByRoomCode","createAsyncThunk","a","get","response","data","createGame","post","thunkApi","player","status","rejectWithValue","statusCode","makeMove","move","GameTile","letter","position","isPlayable","isMostRecentlyPlayed","background","useSelector","state","localPlayer","game","inputDisabled","name","turnPlayerName","content","type","disabled","size","upperLetter","toUpperCase","test","submitMove","style","tiles","x","y","slice","map","row","tile","reduce","accumulator","currentValue","neighborCount","GameBoard","Array","from","keys","moves","forEach","renderedTiles","flexDirection","display","PlayerRow","turnPlayer","PlayersList","players","index","GamePage","useParams","gameLoadStatus","joined","useInterval","App","basename","path","exact","component","to","gamesSlice","createSlice","initialState","reducers","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","playerReducer","createReducer","rootReducer","combineReducers","reducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7daa696.chunk.js","sourcesContent":["import { Alert, Button, Card, InputGroup, Intent } from '@blueprintjs/core';\nimport React, { useState } from 'react';\n\ntype Props = {\n    joinGame: (roomCode: string, playerName: string) => void;\n};\n\nconst GameJoinInfo: React.FC<Props> = ({ joinGame }: Props) => {\n    const [roomCode, setRoomCode] = useState<string>('');\n    const [playerName, setPlayerName] = useState<string>('');\n\n    const [nonemptyAlertIsOpen, setNonemptyAlertIsOpen] = useState<boolean>(false);\n\n    const ensureNonemptyStrings = (\n        roomCode: string,\n        playerName: string,\n        joinGame: (roomCode: string, playerName: string) => void,\n    ) => {\n        if (roomCode.length == 0 || playerName.length == 0) {\n            setNonemptyAlertIsOpen(true);\n        } else {\n            joinGame(roomCode, playerName);\n        }\n    };\n\n    return (\n        <div>\n            <Card elevation={2}>\n                <h2>Join a Game</h2>\n                <InputGroup\n                    maxLength={10}\n                    onChange={(event) => setRoomCode(event.target.value)}\n                    placeholder=\"Room Code...\"\n                />\n                <InputGroup\n                    maxLength={10}\n                    onChange={(event) => setPlayerName(event.target.value)}\n                    placeholder=\"Player Name...\"\n                />\n                <Button\n                    text=\"Join\"\n                    intent={Intent.PRIMARY}\n                    onClick={() => ensureNonemptyStrings(roomCode, playerName, joinGame)}\n                />\n            </Card>\n            <Alert\n                isOpen={nonemptyAlertIsOpen}\n                onClose={() => setNonemptyAlertIsOpen(false)}\n                canEscapeKeyCancel={true}\n                canOutsideClickCancel={true}\n                confirmButtonText=\"Okay\"\n                intent={Intent.WARNING}\n            >\n                <p>You must enter a room code and player name.</p>\n            </Alert>\n        </div>\n    );\n};\n\nexport default GameJoinInfo;\n","import { Button } from '@blueprintjs/core';\nimport React from 'react';\n\nconst Donate: React.FC = () => {\n    const onClick = () => {\n        window.open('https://www.buymeacoffee.com/k2bd', '_blank');\n    };\n\n    return <Button icon=\"dollar\" text=\"Buy me a coffee\" onClick={onClick} intent=\"primary\" />;\n};\n\nexport default Donate;\n","import { Button, Dialog, Intent } from '@blueprintjs/core';\nimport { DIALOG_BODY } from '@blueprintjs/core/lib/esm/common/classes';\nimport React, { useState } from 'react';\n\nconst HowToPlay: React.FC = () => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    return (\n        <div>\n            <Button icon=\"info-sign\" text=\"How to play\" onClick={() => setIsOpen(true)} intent={Intent.PRIMARY} />\n            <Dialog icon=\"info-sign\" onClose={() => setIsOpen(false)} title=\"How to play 2D Ghost\" isOpen={isOpen}>\n                <div className={DIALOG_BODY}>\n                    <h3>Overview</h3>\n                    <p>\n                        2D Ghost is a competitive word building game in which players take turns placing letters on a\n                        board while trying to avoid completing words.\n                    </p>\n                    <h3>Where can I place a tile?</h3>\n                    <p>\n                        A new tile can be placed either at the first free tile along the horizontal or vertical edges,\n                        or at any tile that has at least 3 neighbors (including diagonals). TODO: example images.\n                    </p>\n                    <h3>Challenges</h3>\n                    <p>\n                        A move can be challenged by any player. The challenge can be because the player believes the\n                        previous move either completed a word, or cannot complete a word, in the row or column the most\n                        recent turn was made in. Remember that words being built must start at the edges. (TODO:\n                        examples).\n                    </p>\n                </div>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default HowToPlay;\n","import { Alignment, Navbar } from '@blueprintjs/core';\nimport React from 'react';\nimport Donate from './Donate';\nimport HowToPlay from './HowToPlay';\n\ntype Props = {\n    roomCode?: string;\n};\n\nconst GhostNavbar: React.FC<Props> = ({ roomCode }: Props) => {\n    return (\n        <Navbar>\n            <Navbar.Group align={Alignment.LEFT}>\n                <Navbar.Heading>2D Ghost</Navbar.Heading>\n                <Navbar.Divider />\n                <Navbar.Heading>{roomCode}</Navbar.Heading>\n            </Navbar.Group>\n            <Navbar.Group align={Alignment.RIGHT}>\n                <HowToPlay />\n                <Navbar.Divider />\n                <Donate />\n            </Navbar.Group>\n        </Navbar>\n    );\n};\n\nexport default GhostNavbar;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const setPlayerName = createAction<string, 'setPlayerName'>('setPlayerName');\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport GameJoinInfo from '../components/GameJoinInfo';\nimport GhostNavbar from '../components/GhostNavbar';\nimport { setPlayerName } from '../redux/player/actions';\nimport './JoinGamePage.css';\n\nconst JoinGamePage: React.FC = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const joinGame = (roomCode: string, playerName: string) => {\n        dispatch(setPlayerName(playerName));\n        history.push(`/room/${roomCode}`);\n    };\n\n    return (\n        <div className=\"game-join-page\">\n            <GhostNavbar />\n            <div className=\"vertical-centering\">\n                <GameJoinInfo joinGame={(roomCode, playerName) => joinGame(roomCode, playerName)} />\n            </div>\n        </div>\n    );\n};\n\nexport default JoinGamePage;\n","import axios from 'axios';\n\nconst GHOST_API_URL = process.env.REACT_APP_GHOST_API_URL;\n\nconsole.log(GHOST_API_URL);\n\nconst ghostApi = axios.create({ baseURL: GHOST_API_URL });\n\nexport default ghostApi;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport ghostApi from '../api';\n\ninterface Error {\n    statusCode: number;\n}\n\nexport const fetchGameByRoomCode = createAsyncThunk<Game, string, { rejectValue: Error }>(\n    'games/fetchGameByRoomCode',\n    async (roomCode) => {\n        const response = await ghostApi.get(`/game/${roomCode}`);\n        return response.data as Game;\n    },\n);\n\nexport const createGame = createAsyncThunk<Game, string>('games/createGame', async (roomCode) => {\n    const response = await ghostApi.post(`/game/${roomCode}`);\n    return response.data as Game;\n});\n\nexport const joinGame = createAsyncThunk<Game, { roomCode: string; player: Player }, { rejectValue: Error }>(\n    'games/joinGame',\n    async ({ roomCode, player }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/player`, player);\n        if (response.status === 404) {\n            return thunkApi.rejectWithValue({ statusCode: 404 });\n        }\n        return response.data as Game;\n    },\n);\n\nexport const makeMove = createAsyncThunk<Game, { roomCode: string; move: Move }>(\n    'games/makeMove',\n    async ({ roomCode, move }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/move`, move);\n        if (response.status !== 200) {\n            return thunkApi.rejectWithValue({ statusCode: response.status });\n        }\n        return response.data as Game;\n    },\n);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeMove } from '../redux/games/actions';\nimport { RootState } from '../redux/store';\nimport './GameTile.css';\n\ntype Props = {\n    letter: string | null;\n    position: Position;\n    isPlayable: boolean;\n    isMostRecentlyPlayed: boolean;\n};\n\nconst GameTile: React.FC<Props> = ({ letter, position, isPlayable, isMostRecentlyPlayed }: Props) => {\n    const background = isPlayable ? '#98f795' : isMostRecentlyPlayed ? '#fff759' : '#98f795';\n\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const { game } = useSelector((state: RootState) => state.game);\n\n    const dispatch = useDispatch();\n\n    const submitMove = (letter: string) => {\n        const upperLetter = letter.toUpperCase();\n        if (!/[A-Z]/.test(upperLetter)) {\n            return;\n        }\n\n        if (game !== null && player !== null) {\n            dispatch(\n                makeMove({\n                    roomCode: game.roomCode,\n                    move: { playerName: player.name, position: position, letter: upperLetter },\n                }),\n            );\n        }\n    };\n\n    const inputDisabled = player?.name !== game?.turnPlayerName || !isPlayable;\n\n    const content = (\n        <input\n            type=\"text\"\n            disabled={inputDisabled}\n            value={letter || ''}\n            size={1}\n            onChange={(event) => submitMove(event.target.value)}\n        />\n    );\n\n    return (\n        <div className=\"tile\" style={{ background: background }}>\n            <div className=\"tile-content\">{content}</div>\n        </div>\n    );\n};\n\nexport default GameTile;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport GameTile from './GameTile';\n\nconst neighborCount = (tiles: (string | null)[][], { x, y }: Position): number =>\n    tiles\n        .slice(x - 1, x + 2)\n        .map((row) =>\n            row\n                .slice(y - 1, y + 2)\n                .map((tile) => (tile ? 1 : 0) as number)\n                .reduce((accumulator, currentValue) => accumulator + currentValue, 0),\n        )\n        .reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n\nconst isPlayable = (tiles: (string | null)[][], { x, y }: Position): boolean => {\n    if (tiles[x][y] !== null) {\n        return false;\n    } else if (x === 0 && y === 0) {\n        return true;\n    } else if (x == 0 && tiles[x][y - 1] !== null) {\n        return true;\n    } else if (y == 0 && tiles[x - 1][y] !== null) {\n        return true;\n    } else if (neighborCount(tiles, { x, y }) >= 3) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst GameBoard: React.FC = () => {\n    const { game } = useSelector((state: RootState) => state.game);\n\n    const tiles: (string | null)[][] = Array.from(Array(10).keys()).map(() =>\n        Array.from(Array(10).keys()).map(() => null),\n    );\n    if (game !== null) {\n        game.moves.forEach((move) => (tiles[move.position.x][move.position.y] = move.letter));\n    }\n\n    const renderedTiles = tiles.map((row, x) => (\n        <div style={{ flexDirection: 'row' }} key={x}>\n            {row.map((tile, y) => (\n                <GameTile\n                    letter={tile}\n                    position={{ x, y }}\n                    isPlayable={isPlayable(tiles, { x, y })}\n                    isMostRecentlyPlayed={game?.moves[game.moves.length - 1]?.position === { x, y }}\n                    key={y}\n                />\n            ))}\n        </div>\n    ));\n\n    return <div style={{ display: 'flex' }}>{renderedTiles}</div>;\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\n\ntype PlayerProps = {\n    player: Player;\n    turnPlayer: boolean;\n};\n\nconst PlayerRow: React.FC<PlayerProps> = ({ player, turnPlayer }: PlayerProps) => {\n    const playerName = turnPlayer ? <b>{player.name}</b> : player.name;\n    return <p>{playerName}</p>;\n};\n\nconst PlayersList: React.FC = () => {\n    const { game } = useSelector((state: RootState) => state.game);\n\n    const players = game\n        ? game.players.map((player, index) => (\n              <PlayerRow player={player} turnPlayer={player.name == game.turnPlayerName} key={index} />\n          ))\n        : [];\n\n    return (\n        <>\n            <h4>Players</h4>\n            {players}\n        </>\n    );\n};\n\nexport default PlayersList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport useInterval from 'react-useinterval';\nimport GameBoard from '../components/GameBoard';\nimport GhostNavbar from '../components/GhostNavbar';\nimport PlayersList from '../components/PlayersList';\nimport { createGame, fetchGameByRoomCode, joinGame } from '../redux/games/actions';\nimport { RootState } from '../redux/store';\n\nimport './GamePage.css';\n\nconst POLLING_INTERVAL_MS = 1000;\n\nconst GamePage: React.FC = () => {\n    const { roomCode } = useParams<{ roomCode: string }>();\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const { game, gameLoadStatus, joined } = useSelector((state: RootState) => state.game);\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n\n    if (player === null) {\n        // TODO: temporary solution until we store player state locally to\n        // defend against refreshes\n        history.push('/');\n        return <div></div>;\n    }\n\n    if (game === null) {\n        switch (gameLoadStatus) {\n            case 'idle':\n                dispatch(fetchGameByRoomCode(roomCode));\n                break;\n            case 'gameDoesNotExist':\n                dispatch(createGame(roomCode));\n                break;\n        }\n    } else {\n        if (!joined) {\n            dispatch(joinGame({ roomCode, player }));\n        }\n    }\n\n    // Poll game state, for now\n    useInterval(() => dispatch(fetchGameByRoomCode(roomCode)), POLLING_INTERVAL_MS);\n\n    return (\n        <div>\n            <GhostNavbar roomCode={roomCode} />\n            <div className=\"with-sidebar\">\n                <div className=\"sidebar\">\n                    <PlayersList />\n                </div>\n                <div className=\"not-sidebar\">\n                    <div className=\"game-page\">\n                        <div className=\"vertical-centering\">\n                            <GameBoard />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default GamePage;\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nimport JoinGamePage from './pages/JoinGamePage';\nimport GamePage from './pages/GamePage';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter basename=\"/\">\n                <Switch>\n                    <Route path=\"/\" exact component={JoinGamePage} />\n                    <Route path=\"/room/:roomCode\" component={GamePage} />\n\n                    <Redirect to=\"/\" />\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n};\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { createGame, fetchGameByRoomCode, joinGame, makeMove } from './actions';\n\nconst gamesSlice = createSlice({\n    name: 'games',\n    initialState: {\n        game: null as Game | null,\n        gameLoadStatus: 'idle' as GameLoadStatus,\n        joined: false,\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(fetchGameByRoomCode.pending, (state) => {\n            state.gameLoadStatus = 'loading';\n        });\n        builder.addCase(fetchGameByRoomCode.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.gameLoadStatus = 'idle';\n        });\n        builder.addCase(fetchGameByRoomCode.rejected, (state, action) => {\n            state.game = null;\n            //state.gameLoadStatus = 'error';\n            state.gameLoadStatus = 'gameDoesNotExist'; // TEMP\n            if (action.payload) {\n                if (action.payload.statusCode == 404) {\n                    state.gameLoadStatus = 'gameDoesNotExist';\n                }\n            }\n        });\n        builder.addCase(createGame.pending, (state) => {\n            state.game = null;\n            state.gameLoadStatus = 'loading';\n        });\n        builder.addCase(createGame.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.gameLoadStatus = 'idle';\n        });\n        builder.addCase(createGame.rejected, (state) => {\n            state.game = null;\n            state.gameLoadStatus = 'error';\n        });\n        builder.addCase(joinGame.pending, (state) => {\n            state.gameLoadStatus = 'joining';\n            state.joined = false;\n        });\n        builder.addCase(joinGame.fulfilled, (state, action) => {\n            state.gameLoadStatus = 'idle';\n            state.joined = true;\n            state.game = action.payload;\n        });\n        builder.addCase(joinGame.rejected, (state) => {\n            state.gameLoadStatus = 'error';\n            state.joined = false;\n        });\n        builder.addCase(makeMove.pending, () => {\n            // TODO\n        });\n        builder.addCase(makeMove.fulfilled, (state, action) => {\n            state.game = action.payload;\n        });\n    },\n});\n\nexport default gamesSlice;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { setPlayerName } from './actions';\n\nconst playerReducer = createReducer({ localPlayer: null as Player | null }, (builder) =>\n    builder.addCase(setPlayerName, (state, action) => {\n        state.localPlayer = { name: action.payload };\n    }),\n);\n\nexport default playerReducer;\n","import { combineReducers } from 'redux';\nimport gamesSlice from './games/reducers';\nimport playerReducer from './player/reducers';\n\nconst rootReducer = combineReducers({\n    game: gamesSlice.reducer,\n    player: playerReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}