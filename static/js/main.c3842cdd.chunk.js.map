{"version":3,"sources":["components/GameJoinInfo.tsx","components/Donate.tsx","components/HowToPlay.tsx","redux/api.ts","redux/player/actions.ts","components/LoginDialog.tsx","components/GhostNavbar.tsx","pages/JoinGamePage.tsx","redux/games/actions.ts","components/ChallengeButton.tsx","components/ChallengeIssuedDialog.tsx","hooks/useGame.ts","hooks/usePlayer.ts","components/GameTile.tsx","components/TilesRow.tsx","components/ChallengeResponseDialog.tsx","components/ChallengeVoteDialog.tsx","components/GameBoard.tsx","components/PlayersList.tsx","hooks/useRoomCode.ts","components/PreGameCard.tsx","pages/GamePage.tsx","App.tsx","redux/games/reducers.ts","redux/player/reducers.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["GameJoinInfo","joinGame","randomRoomPrefix","friendlyWords","predicates","Math","floor","random","length","randomRoomSuffix","objects","useState","roomCode","setRoomCode","elevation","style","display","flexDirection","maxLength","onChange","event","target","value","placeholder","text","intent","Intent","PRIMARY","onClick","disabled","Donate","buttonText","isMobile","icon","href","HowToPlay","isOpen","setIsOpen","onClose","title","className","DIALOG_BODY","rel","src","ghostApi","axios","create","baseURL","process","logOut","createAction","loginGuest","createAsyncThunk","guestInfo","a","post","response","data","LoginDialog","enabled","loginStatus","useSelector","state","player","guestName","setGuestName","dispatch","useDispatch","guestLogin","name","isCloseButtonShown","Classes","onSubmit","preventDefault","label","FORM_CONTENT","fill","loading","GhostNavbar","history","useHistory","localPlayer","useClipboard","window","location","isCopied","setCopied","playerComponent","minimal","large","size","round","imageUrl","roomCodeComponent","rightIcon","Group","align","Alignment","LEFT","Heading","push","outlined","Divider","RIGHT","JoinGamePage","Elevation","TWO","marginTop","marginBottom","reloadGame","fetchGameByRoomCode","get","createGame","thunkApi","status","rejectWithValue","statusCode","startGame","makeMove","move","makeChallenge","challenge","makeChallengeResponse","challengeResponse","makeChallengeVote","vote","resetPolling","ChallengeButton","game","turnPlayerName","moves","winner","createChallenge","type","challengerName","challengeButton","DANGER","popoverContent","content","placement","ChallengeIssuedDialog","playerName","useGame","usePlayer","GameTile","letter","position","isPlayable","isMostRecentlyPlayed","background","upperLetter","toUpperCase","test","submitMove","rowEntries","rowIndex","rowValues","filter","y","sort","b","x","rowIndexes","map","rowWidth","Array","from","keys","_","index","includes","indexOf","colEntries","colIndex","colValues","colIndexes","colWidth","TilesRow","entries","ChallengeResponseDialog","rowWord","setRowWord","colWord","setColWord","mostRecentMove","row","col","inline","join","ChallengeVoteDialog","messageBody","challengedRow","challengedCol","submitVote","proChallenge","voterName","submitted","votes","responseRow","responseCol","split","stillVoting","paddingTop","SpinnerSize","SMALL","tiles","slice","tile","reduce","accumulator","currentValue","neighborCount","GameBoard","gameLoadStatus","LARGE","max","forEach","renderedTiles","deepEqual","cancel","PlayerRow","turnPlayer","loser","NONE","PlayersList","expanded","setExpanded","players","losers","useRoomCode","useParams","PreGameCard","started","POLLING_TIMEOUT_MS","GamePage","joined","joinedRoomCode","latestAction","polling","setPolling","useInterval","useEffect","moment","diff","resetPollingAlert","canOutsideClickCancel","confirmButtonText","duration","humanize","spinner","top","left","transform","msTransform","inGame","undefined","find","p","mainContent","App","basename","path","exact","component","to","INITIAL_STATE","gamesSlice","createSlice","initialState","reducers","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","playerSlice","rootReducer","combineReducers","reducer","playerReducer","persistConfig","key","storage","whitelist","pReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3842cdd.chunk.js","sourcesContent":["import { Button, Card, InputGroup, Intent } from '@blueprintjs/core';\nimport React, { useState } from 'react';\nimport friendlyWords from 'friendly-words';\n\ntype Props = {\n    joinGame: (roomCode: string) => void;\n};\n\nconst GameJoinInfo: React.FC<Props> = ({ joinGame }: Props) => {\n    const randomRoomPrefix: string =\n        friendlyWords.predicates[Math.floor(Math.random() * friendlyWords.predicates.length)];\n    const randomRoomSuffix: string = friendlyWords.objects[Math.floor(Math.random() * friendlyWords.objects.length)];\n    const [roomCode, setRoomCode] = useState<string>(`${randomRoomPrefix}-${randomRoomSuffix}`);\n\n    return (\n        <div>\n            <Card elevation={2}>\n                <h2>Create or Join a Game</h2>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    <InputGroup\n                        maxLength={30}\n                        onChange={(event) => setRoomCode(event.target.value)}\n                        placeholder=\"Room Code...\"\n                        value={roomCode}\n                    />\n                    <Button\n                        text=\"Join\"\n                        intent={Intent.PRIMARY}\n                        onClick={() => joinGame(roomCode)}\n                        disabled={roomCode.length < 4}\n                    />\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default GameJoinInfo;\n","import { AnchorButton } from '@blueprintjs/core';\nimport React from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst Donate: React.FC = () => {\n    const buttonText = isMobile ? '' : 'Support';\n\n    return (\n        <AnchorButton\n            icon=\"dollar\"\n            text={buttonText}\n            href=\"https://www.buymeacoffee.com/k2bd\"\n            target=\"_blank\"\n            intent=\"primary\"\n        />\n    );\n};\n\nexport default Donate;\n","import { Button, Dialog, Intent } from '@blueprintjs/core';\nimport { DIALOG_BODY } from '@blueprintjs/core/lib/esm/common/classes';\nimport React, { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nconst HowToPlay: React.FC = () => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    const buttonText = isMobile ? '' : 'How to play';\n\n    return (\n        <div>\n            <Button icon=\"info-sign\" text={buttonText} onClick={() => setIsOpen(true)} intent={Intent.PRIMARY} />\n            <Dialog icon=\"info-sign\" onClose={() => setIsOpen(false)} title=\"How to play 2D Ghost\" isOpen={isOpen}>\n                <div className={DIALOG_BODY}>\n                    <h2>{'Overview'}</h2>\n                    <p>\n                        {\n                            \"2D Ghost is a competitive word building game in which players take turns placing letters on a board while trying to avoid completing 4+ letter words horizontally or vertically. As the name suggests it's a 2D extension of the existing word game \"\n                        }\n                        <a href=\"https://en.wikipedia.org/wiki/Ghost_(game)\" target=\"_blank\" rel=\"noreferrer\">\n                            Ghost\n                        </a>\n                        {'.'}\n                    </p>\n                    <p>\n                        {\n                            'A turn consists of either placing a tile on an available square, or challenging the previous move.'\n                        }\n                    </p>\n                    <h2>{'Tile placement'}</h2>\n                    <p>\n                        {\n                            'A new tile can be placed either at the first free tile along the horizontal or vertical edges, or at any tile that has at least 3 filled neighbors (including diagonals).'\n                        }\n                    </p>\n                    <p>\n                        {\n                            'Playable tiles are highlighted in yellow, and the most recently played tile is coloured blue.'\n                        }\n                    </p>\n                    <img src=\"https://imgur.com/C9ME23a.png\" />\n                    <p>\n                        {\n                            \"In this example, the tile to the right of the 'N' and below the 'E' are playable because they're the next free tiles on the top and left borders of the board, and the tile to the right of the 'X' is playable because it has 3 neighbors (the 'X', 'A', and 'N'). No other tiles are playable.\"\n                        }\n                    </p>\n                    <p>\n                        {\n                            \"When you make a move, you must be moving towards the completion of a 4+ letter word in both the row and column that your move is made in. In the above example, the player who placed the most recent move (the 'X') must be thinking of valid 4+ letter words starting with 'AX' and 'EX'. However, players must not actually complete 4+ letter words. Failing either condition leaves you vulnerable to a challenge. Of course, if you can't think of any valid moves, bluffing may be your only option.\"\n                        }\n                    </p>\n                    <h2>{'Challenges'}</h2>\n                    <p>\n                        {\n                            \"If the turn player believes the previous move either completed a word, or cannot complete a word, in the row or column the most recent turn was made in, they may issue a challenge. Remember the rules in the 'Valid Words' section when making, responding to, and voting on challenges.\"\n                        }\n                    </p>\n                    <p>\n                        {\n                            \"When a 'No Valid Words' challenge is made, the challenged player is given an opportunity to respond with what they believe to be valid words in the row and column their move was made in. 'Completed Word' challenges go straight to a vote.\"\n                        }\n                    </p>\n                    <p>\n                        {\n                            'When a challenge has been made, players must vote on whether the challenge is successful. If it is, the challenged player will be removed from the game. If it fails, the challenger is removed. A challenge must get at least 50% of the votes to pass.'\n                        }\n                    </p>\n                    <h2>{'Valid Moves'}</h2>\n                    <h3>{'Only 4+ letter words count'}</h3>\n                    <p>\n                        {\n                            \"Only words that are 4 letters or more are more count as completed words. It's OK for a board to contain the words 'A', 'AN', and 'ANT', but not 'ANTS'.\"\n                        }\n                    </p>\n                    <h3>{'All words start at the edges'}</h3>\n                    <p>\n                        {\n                            \"All words in 2D Ghost start at the edge of the board. So, if a board has '_,_,_,F,A,C' in a row or column, no word would be completed by playing an 'E' at the end, and this would be a valid move towards the word 'surface'.\"\n                        }\n                    </p>\n                    <h3>{\"The board doesn't have to be fully solvable\"}</h3>\n                    <p>\n                        {\n                            \"Quite often a move is valid for the row and column it's played in, but makes some other part of the board impossible to solve. This is fine, and can be used to strategically exclude moves previously accessible to your opponents.\"\n                        }\n                    </p>\n                    <h3>{\"Invalid moves that don't get challenged are fine\"}</h3>\n                    <p>\n                        {\n                            \"If a move was invalid, in that it either completed a 4+ letter word, or it was impossible to complete words in the row or column, and this went unchallenged, that's fine and the game continues. Bluffing is a legal strategy.\"\n                        }\n                    </p>\n                    <h2>{'Misc'}</h2>\n                    <h3>{'Dictionary Use'}</h3>\n                    <p>\n                        {\n                            \"Your group may choose to select a dictionary to be the judge of valid words in your game. If you do, this should be consulted only during challenge votes, and only to evaluate the challenge. You shouldn't use a dictionary when making moves or when writing in answers to a 'No Valid Moves' challenge.\"\n                        }\n                    </p>\n                </div>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default HowToPlay;\n","import axios from 'axios';\n\nconst GHOST_API_URL = process.env.REACT_APP_GHOST_API_URL;\n\nconst ghostApi = axios.create({ baseURL: GHOST_API_URL });\n\nexport default ghostApi;\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport ghostApi from '../api';\n\nexport const logOut = createAction('player/logOut');\n\nexport const loginGuest = createAsyncThunk<Player, GuestLogin>('player/loginGuest', async (guestInfo: GuestLogin) => {\n    const response = await ghostApi.post(`/login/guest`, guestInfo);\n    return response.data as Player;\n});\n","import { Button, Classes, Dialog, FormGroup, InputGroup } from '@blueprintjs/core';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginGuest } from '../redux/player/actions';\nimport { RootState } from '../redux/store';\n\ntype Props = {\n    enabled: boolean;\n};\n\nconst LoginDialog: React.FC<Props> = ({ enabled }: Props) => {\n    const { loginStatus } = useSelector((state: RootState) => state.player);\n    const [guestName, setGuestName] = useState<string>('');\n    const dispatch = useDispatch();\n\n    const guestLogin = () => {\n        dispatch(loginGuest({ name: guestName }));\n    };\n\n    return (\n        <Dialog isOpen={enabled} title=\"Login\" isCloseButtonShown={false} icon=\"user\">\n            <div className={Classes.DIALOG_BODY}>\n                <form\n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        guestLogin();\n                    }}\n                >\n                    <FormGroup label=\"Login as Guest\">\n                        <div className={Classes.FORM_CONTENT}>\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                <InputGroup\n                                    placeholder=\"Display name\"\n                                    onChange={(event) => setGuestName(event.target.value)}\n                                    value={guestName}\n                                    fill={true}\n                                />\n                                <Button\n                                    onClick={() => guestLogin()}\n                                    icon=\"log-in\"\n                                    disabled={guestName.length < 3}\n                                    loading={loginStatus === 'loggingIn'}\n                                />\n                            </div>\n                        </div>\n                    </FormGroup>\n                </form>\n            </div>\n        </Dialog>\n    );\n};\n\nexport default LoginDialog;\n","import { Alignment, Button, Navbar, Tag } from '@blueprintjs/core';\nimport React from 'react';\nimport Avatar from 'react-avatar';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { RootState } from '../redux/store';\nimport Donate from './Donate';\nimport HowToPlay from './HowToPlay';\nimport LoginDialog from './LoginDialog';\nimport useClipboard from 'react-use-clipboard';\nimport { isMobile } from 'react-device-detect';\n\ntype Props = {\n    roomCode?: string;\n};\n\nconst GhostNavbar: React.FC<Props> = ({ roomCode }: Props) => {\n    const history = useHistory();\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const [isCopied, setCopied] = useClipboard(window.location.href);\n\n    const playerComponent =\n        player && !isMobile ? (\n            // TODO create player card component\n            <Tag fill minimal large icon={<Avatar size=\"20\" round src={player?.imageUrl} />}>\n                {player?.name}\n            </Tag>\n        ) : (\n            <></>\n        );\n\n    const roomCodeComponent =\n        roomCode && !isMobile ? (\n            <Button text={roomCode} rightIcon={isCopied ? 'tick' : 'clipboard'} onClick={() => setCopied()} />\n        ) : (\n            <></>\n        );\n\n    return (\n        <Navbar>\n            <Navbar.Group align={Alignment.LEFT}>\n                <Navbar.Heading>\n                    <Button\n                        text={isMobile ? '' : '2D Ghost'}\n                        icon=\"home\"\n                        onClick={() => {\n                            history.push('/');\n                        }}\n                        outlined={true}\n                    />\n                </Navbar.Heading>\n                {playerComponent}\n                <LoginDialog enabled={player === null} />\n                <Navbar.Divider />\n                <Navbar.Heading>{roomCodeComponent}</Navbar.Heading>\n            </Navbar.Group>\n            <Navbar.Group align={Alignment.RIGHT}>\n                <HowToPlay />\n                <Navbar.Divider />\n                <Donate />\n            </Navbar.Group>\n        </Navbar>\n    );\n};\n\nexport default GhostNavbar;\n","import { Button, Card, Elevation, Tag } from '@blueprintjs/core';\nimport React from 'react';\nimport Avatar from 'react-avatar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport GameJoinInfo from '../components/GameJoinInfo';\nimport GhostNavbar from '../components/GhostNavbar';\nimport { logOut } from '../redux/player/actions';\nimport { RootState } from '../redux/store';\nimport './JoinGamePage.css';\n\nconst JoinGamePage: React.FC = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n\n    const joinGame = (roomCode: string) => {\n        history.push(`/room/${roomCode}`);\n    };\n\n    const doLogout = () => {\n        dispatch(logOut());\n    };\n\n    return (\n        <div className=\"game-join-page\">\n            <GhostNavbar />\n            <div className=\"vertical-centering\">\n                <GameJoinInfo joinGame={(roomCode) => joinGame(roomCode)} />\n                <Card elevation={Elevation.TWO} style={{ marginTop: '2em' }}>\n                    <Tag\n                        fill={true}\n                        minimal={true}\n                        large={true}\n                        icon={<Avatar size=\"20\" round={true} src={player?.imageUrl} />}\n                        style={{ marginBottom: '1em' }}\n                    >\n                        {player?.name}\n                    </Tag>\n                    <Button text=\"Logout\" onClick={() => doLogout()} icon=\"log-out\" />\n                </Card>\n            </div>\n        </div>\n    );\n};\n\nexport default JoinGamePage;\n","import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport ghostApi from '../api';\n\ninterface Error {\n    statusCode: number;\n}\n\nexport const reloadGame = createAction('games/reloadGame');\n\nexport const fetchGameByRoomCode = createAsyncThunk<Game, string, { rejectValue: Error }>(\n    'games/fetchGameByRoomCode',\n    async (roomCode) => {\n        const response = await ghostApi.get(`/game/${roomCode}`);\n        return response.data as Game;\n    },\n);\n\nexport const createGame = createAsyncThunk<Game, string>('games/createGame', async (roomCode) => {\n    const response = await ghostApi.post(`/game/${roomCode}`);\n    return response.data as Game;\n});\n\nexport const joinGame = createAsyncThunk<Game, { roomCode: string; player: Player }, { rejectValue: Error }>(\n    'games/joinGame',\n    async ({ roomCode, player }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/player`, player);\n        if (response.status === 404) {\n            return thunkApi.rejectWithValue({ statusCode: 404 });\n        }\n        return response.data as Game;\n    },\n);\n\nexport const startGame = createAsyncThunk<Game, string>('games/startGame', async (roomCode) => {\n    const response = await ghostApi.post(`/game/${roomCode}/start`);\n    return response.data as Game;\n});\n\nexport const makeMove = createAsyncThunk<Game, { roomCode: string; move: Move }>(\n    'games/makeMove',\n    async ({ roomCode, move }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/move`, move);\n        if (response.status !== 200) {\n            return thunkApi.rejectWithValue({ statusCode: response.status });\n        }\n        return response.data as Game;\n    },\n);\n\nexport const makeChallenge = createAsyncThunk<Game, { roomCode: string; challenge: NewChallenge }>(\n    'games/makeChallenge',\n    async ({ roomCode, challenge }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/challenge`, challenge);\n        if (response.status !== 200) {\n            return thunkApi.rejectWithValue({ statusCode: response.status });\n        }\n        return response.data as Game;\n    },\n);\n\nexport const makeChallengeResponse = createAsyncThunk<Game, { roomCode: string; challengeResponse: ChallengeResponse }>(\n    'games/makeChallengeResponse',\n    async ({ roomCode, challengeResponse }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/challenge-response`, challengeResponse);\n        if (response.status !== 200) {\n            return thunkApi.rejectWithValue({ statusCode: response.status });\n        }\n        return response.data as Game;\n    },\n);\n\nexport const makeChallengeVote = createAsyncThunk<Game, { roomCode: string; vote: ChallengeVote }>(\n    'games/makeChallengeVote',\n    async ({ roomCode, vote }, thunkApi) => {\n        const response = await ghostApi.post(`/game/${roomCode}/challenge-vote`, vote);\n        if (response.status !== 200) {\n            return thunkApi.rejectWithValue({ statusCode: response.status });\n        }\n        return response.data as Game;\n    },\n);\n\nexport const resetPolling = createAction('games/resetPolling');\n","import { AnchorButton, Button, Intent } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeChallenge } from '../redux/games/actions';\nimport { RootState } from '../redux/store';\n\nconst ChallengeButton: React.FC = () => {\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const { game } = useSelector((state: RootState) => state.game);\n\n    const dispatch = useDispatch();\n\n    const enabled =\n        game &&\n        player?.name === game.turnPlayerName &&\n        game.moves.length > 0 &&\n        game.challenge === null &&\n        game.winner === null;\n\n    const createChallenge = (type: ChallengeType) => {\n        if (game === null || player === null) {\n            return;\n        }\n        dispatch(\n            makeChallenge({\n                roomCode: game.roomCode,\n                challenge: {\n                    challengerName: player.name,\n                    move: game.moves[game.moves.length - 1],\n                    type: type,\n                },\n            }),\n        );\n    };\n\n    const challengeButton = <AnchorButton icon=\"flag\" text=\"Challenge\" disabled={!enabled} intent={Intent.DANGER} />;\n    const popoverContent = (\n        <div>\n            <Button\n                text=\"No valid words\"\n                disabled={!enabled}\n                intent={Intent.PRIMARY}\n                onClick={() => createChallenge('NO_VALID_WORDS')}\n            />\n            <Button\n                text=\"Word already complete\"\n                disabled={!enabled}\n                intent={Intent.PRIMARY}\n                onClick={() => createChallenge('COMPLETE_WORD')}\n            />\n        </div>\n    );\n    return (\n        <Popover2 content={popoverContent} disabled={!enabled} placement=\"bottom\">\n            {challengeButton}\n        </Popover2>\n    );\n};\n\nexport default ChallengeButton;\n","import { Classes, Dialog } from '@blueprintjs/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\n\nconst ChallengeIssuedDialog: React.FC = () => {\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const { game } = useSelector((state: RootState) => state.game);\n\n    if (!game || !player || game.moves.length == 0) {\n        return <></>;\n    }\n\n    const enabled = (game.challenge &&\n        game.challenge.move.playerName !== player.name &&\n        game.challenge.state === 'AWAITING_RESPONSE') as boolean;\n\n    return (\n        <Dialog isOpen={enabled} title=\"Challenge in Progress!\" isCloseButtonShown={false} icon=\"flag\">\n            <div className={Classes.DIALOG_BODY}>\n                <h3>{game.challenge?.move.playerName} has been challenged!</h3>\n\n                <p>\n                    {game?.challenge?.challengerName} has challenged that the most recent move cannot make valid words.\n                </p>\n\n                <p>\n                    {game.challenge?.move.playerName} is currently entering what they believe to be valid words in the\n                    row and column of their most recent move. Once {\"they've\"} done this, it will be put to a vote.\n                </p>\n                <p>\n                    Remember the words should be at least 4 letters long and must start at the beginning of the row or\n                    column.\n                </p>\n            </div>\n        </Dialog>\n    );\n};\n\nexport default ChallengeIssuedDialog;\n","import { useSelector } from 'react-redux';\nimport { GamesSliceState } from '../redux/games/reducers';\nimport { RootState } from '../redux/store';\n\nconst useGame = (): GamesSliceState => useSelector((state: RootState) => state.game);\n\nexport default useGame;\n","import { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\n\nconst usePlayer = (): Player | null => useSelector((state: RootState) => state.player.localPlayer);\n\nexport default usePlayer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport useGame from '../hooks/useGame';\nimport usePlayer from '../hooks/usePlayer';\nimport { makeMove } from '../redux/games/actions';\nimport './GameTile.css';\n\ntype Props = {\n    letter: string | null;\n    position: Position;\n    isPlayable: boolean;\n    isMostRecentlyPlayed: boolean;\n};\n\nconst GameTile: React.FC<Props> = ({ letter, position, isPlayable, isMostRecentlyPlayed }: Props) => {\n    const background = isPlayable ? '#fff715' : isMostRecentlyPlayed ? '#40acde' : '#98f795';\n\n    const player = usePlayer();\n    const { game } = useGame();\n\n    const dispatch = useDispatch();\n\n    const submitMove = (letter: string) => {\n        const upperLetter = letter.toUpperCase();\n        if (!/[A-Z]/.test(upperLetter)) {\n            return;\n        }\n\n        if (game !== null && player !== null) {\n            dispatch(\n                makeMove({\n                    roomCode: game.roomCode,\n                    move: { playerName: player.name, position: position, letter: upperLetter },\n                }),\n            );\n        }\n    };\n\n    const inputDisabled = player?.name !== game?.turnPlayerName || !isPlayable || game?.winner !== null;\n\n    const content = inputDisabled ? (\n        <div className=\"tile-text\">{letter}</div>\n    ) : (\n        <input\n            type=\"text\"\n            className=\"tile-input\"\n            value={letter || ''}\n            size={1}\n            onChange={(event) => submitMove(event.target.value)}\n        />\n    );\n\n    return (\n        <div className=\"tile\" style={{ background: background }}>\n            <div className=\"tile-content\">{content}</div>\n        </div>\n    );\n};\n\nexport default GameTile;\n","import React from 'react';\nimport GameTile from './GameTile';\n\nexport const rowEntries = (moves: Move[], rowIndex: number): (string | null)[] => {\n    const rowValues = moves.filter((move) => move.position.y === rowIndex).sort((a, b) => a.position.x - b.position.x);\n\n    const rowIndexes = rowValues.map((move) => move.position.x);\n\n    const rowWidth = rowValues[rowValues.length - 1].position.x + 1;\n\n    const rowWithNulls = Array.from(Array(rowWidth).keys()).map((_, index) => {\n        if (rowIndexes.includes(index)) {\n            return rowValues[rowIndexes.indexOf(index)].letter;\n        } else {\n            return null;\n        }\n    });\n\n    return rowWithNulls;\n};\n\nexport const colEntries = (moves: Move[], colIndex: number): (string | null)[] => {\n    const colValues = moves.filter((move) => move.position.x === colIndex).sort((a, b) => a.position.y - b.position.y);\n\n    const colIndexes = colValues.map((move) => move.position.y);\n\n    const colWidth = colValues[colValues.length - 1].position.y + 1;\n\n    const colWithNulls = Array.from(Array(colWidth).keys()).map((_, index) => {\n        if (colIndexes.includes(index)) {\n            return colValues[colIndexes.indexOf(index)].letter;\n        } else {\n            return null;\n        }\n    });\n\n    return colWithNulls;\n};\n\ntype Props = {\n    entries: (string | null)[];\n};\n\nconst TilesRow: React.FC<Props> = ({ entries }: Props) => {\n    return (\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n            {entries.map((value, index) => (\n                <GameTile\n                    letter={value}\n                    position={{ x: index, y: 0 }}\n                    isPlayable={false}\n                    isMostRecentlyPlayed={false}\n                    key={index}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default TilesRow;\n","import { Button, Classes, Dialog, FormGroup, InputGroup } from '@blueprintjs/core';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeChallengeResponse } from '../redux/games/actions';\nimport { RootState } from '../redux/store';\nimport TilesRow, { colEntries, rowEntries } from './TilesRow';\n\nconst ChallengeResponseDialog: React.FC = () => {\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const { game } = useSelector((state: RootState) => state.game);\n\n    const [rowWord, setRowWord] = useState<string>('');\n    const [colWord, setColWord] = useState<string>('');\n\n    const dispatch = useDispatch();\n\n    if (!game || !player || game.moves.length == 0) {\n        return <></>;\n    }\n\n    const enabled = (game.challenge &&\n        game.challenge.move.playerName === player.name &&\n        game.challenge.state === 'AWAITING_RESPONSE') as boolean;\n\n    const mostRecentMove = game.moves[game.moves.length - 1];\n    const row = rowEntries(game.moves, mostRecentMove.position.y);\n    const col = colEntries(game.moves, mostRecentMove.position.x);\n\n    const submitResponse = () => {\n        dispatch(makeChallengeResponse({ roomCode: game.roomCode, challengeResponse: { rowWord, colWord } }));\n    };\n\n    return (\n        <Dialog isOpen={enabled} title=\"Challenge Response\" isCloseButtonShown={false} icon=\"flag\">\n            <div className={Classes.DIALOG_BODY}>\n                <h3>You have been challenged!</h3>\n\n                <p>\n                    {game?.challenge?.challengerName} has challenged that your most recent move cannot make valid words.\n                </p>\n\n                <p>\n                    Please provide words that can be made from the row and column of your last move, containing the\n                    placed letters and adding as many letters to the end as you want.\n                </p>\n                <p>\n                    Remember the words should be at least 4 letters long and must start at the beginning of the row or\n                    column.\n                </p>\n\n                <FormGroup label=\"Row:\" inline={true}>\n                    <TilesRow entries={row} />\n                    <InputGroup\n                        placeholder={row.map((value) => value || '_').join('') + '...'}\n                        onChange={(event) => setRowWord(event.target.value)}\n                        value={rowWord}\n                    />\n                </FormGroup>\n\n                <FormGroup label=\"Col:\" inline={true}>\n                    <TilesRow entries={col} />\n                    <InputGroup\n                        placeholder={col.map((value) => value || '_').join('') + '...'}\n                        onChange={(event) => setColWord(event.target.value)}\n                        value={colWord}\n                    />\n                </FormGroup>\n            </div>\n            <Button\n                text=\"Submit\"\n                onClick={() => submitResponse()}\n                disabled={rowWord.length === 0 || colWord.length === 0}\n            />\n        </Dialog>\n    );\n};\n\nexport default ChallengeResponseDialog;\n","import React from 'react';\nimport { Button, Classes, Dialog, FormGroup, Spinner, SpinnerSize, Tag } from '@blueprintjs/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeChallengeVote } from '../redux/games/actions';\nimport { RootState } from '../redux/store';\nimport TilesRow, { colEntries, rowEntries } from './TilesRow';\n\nconst ChallengeVoteDialog: React.FC = () => {\n    const player = useSelector((state: RootState) => state.player.localPlayer);\n    const { game } = useSelector((state: RootState) => state.game);\n\n    const dispatch = useDispatch();\n\n    if (!game || !player || game.moves.length == 0 || !game.challenge) {\n        return <></>;\n    }\n\n    const challengedRow = rowEntries(game.moves, game.challenge.move.position.y);\n    const challengedCol = colEntries(game.moves, game.challenge.move.position.x);\n\n    const enabled = (game.challenge && game.challenge.state === 'VOTING') as boolean;\n\n    const submitVote = (proChallenge: boolean) => {\n        dispatch(makeChallengeVote({ roomCode: game.roomCode, vote: { voterName: player.name, proChallenge } }));\n    };\n    const submitted = () => game.challenge?.votes.map((vote) => vote.voterName).includes(player.name);\n\n    let messageBody;\n    switch (game.challenge.type) {\n        case 'NO_VALID_WORDS': {\n            const responseRow = game.challenge.response?.rowWord.toUpperCase() || '';\n            const responseCol = game.challenge.response?.colWord.toUpperCase() || '';\n            messageBody = (\n                <div>\n                    <p>\n                        {game.challenge.challengerName}\n                        {\" believes valid words can't be made from the most recent move.\"}\n                    </p>\n\n                    <p>{game.challenge.move.playerName} has provided the following words in response.</p>\n\n                    <FormGroup label=\"Row:\" inline={true}>\n                        <FormGroup label=\"Tiles:\" inline={false}>\n                            <TilesRow entries={challengedRow} />\n                        </FormGroup>\n                        <FormGroup label=\"Response:\" inline={false}>\n                            <TilesRow entries={responseRow.split('')} />\n                        </FormGroup>\n                    </FormGroup>\n                    <FormGroup label=\"Col:\" inline={true}>\n                        <FormGroup label=\"Tiles:\" inline={false}>\n                            <TilesRow entries={challengedCol} />\n                        </FormGroup>\n                        <FormGroup label=\"Response:\" inline={false}>\n                            <TilesRow entries={responseCol.split('')} />\n                        </FormGroup>\n                    </FormGroup>\n                </div>\n            );\n            break;\n        }\n        case 'COMPLETE_WORD': {\n            messageBody = (\n                <div>\n                    <p>{game.challenge.challengerName} believes the most recent move completed a word.</p>\n\n                    <FormGroup label=\"Row:\" inline={true}>\n                        <p>Tiles:</p>\n                        <TilesRow entries={challengedRow} />\n                    </FormGroup>\n                    <FormGroup label=\"Col:\" inline={true}>\n                        <p>Tiles:</p>\n                        <TilesRow entries={challengedCol} />\n                    </FormGroup>\n                </div>\n            );\n            break;\n        }\n    }\n\n    const stillVoting = (\n        <div style={{ paddingTop: '3px' }}>\n            <Tag intent=\"primary\" minimal icon={<Spinner size={SpinnerSize.SMALL} />}>\n                Players are still voting...\n            </Tag>\n        </div>\n    );\n\n    return (\n        <Dialog isOpen={enabled} title=\"Challenge!\" isCloseButtonShown={false} icon=\"flag\">\n            <div className={Classes.DIALOG_BODY}>\n                <h3>\n                    {game.challenge.challengerName} has challenged {game.challenge.move.playerName}!\n                </h3>\n                {messageBody}\n                <p>Is the challenge successful?</p>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    <Button\n                        text={`Yes, kick ${game.challenge.move.playerName}`}\n                        onClick={() => submitVote(true)}\n                        disabled={submitted()}\n                    />\n                    <Button\n                        text={`No, kick ${game.challenge.challengerName}`}\n                        onClick={() => submitVote(false)}\n                        disabled={submitted()}\n                    />\n                </div>\n                {submitted() ? stillVoting : null}\n            </div>\n        </Dialog>\n    );\n};\n\nexport default ChallengeVoteDialog;\n","import React from 'react';\nimport GameTile from './GameTile';\nimport deepEqual from 'deep-equal';\nimport { Spinner, SpinnerSize } from '@blueprintjs/core';\nimport Draggable from 'react-draggable';\nimport useGame from '../hooks/useGame';\n\nconst neighborCount = (tiles: (string | null)[][], { x, y }: Position): number =>\n    tiles\n        .slice(x - 1, x + 2)\n        .map((row) =>\n            row\n                .slice(y - 1, y + 2)\n                .map((tile) => (tile ? 1 : 0) as number)\n                .reduce((accumulator, currentValue) => accumulator + currentValue, 0),\n        )\n        .reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n\nconst isPlayable = (tiles: (string | null)[][], { x, y }: Position): boolean => {\n    if (tiles[x][y] !== null) {\n        return false;\n    } else if (x === 0 && y === 0) {\n        return true;\n    } else if (x == 0 && tiles[x][y - 1] !== null) {\n        return true;\n    } else if (y == 0 && tiles[x - 1][y] !== null) {\n        return true;\n    } else if (neighborCount(tiles, { x, y }) >= 3) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/**\n * Get the size of the board to display\n */\nconst boardSize = (moves: Move[]): number => {\n    const moveWidth = moves\n        .map((move) => Math.max(move.position.x, move.position.y))\n        .reduce((accumulator, currentValue) => Math.max(accumulator, currentValue), 0);\n\n    return moveWidth + 2;\n};\n\nconst GameBoard: React.FC = () => {\n    const { game, gameLoadStatus } = useGame();\n\n    if (['gameDoesNotExist', 'creatingGame', 'joining'].includes(gameLoadStatus)) {\n        return <Spinner size={SpinnerSize.LARGE} />;\n    }\n\n    const size = boardSize(game ? game.moves : []);\n    const tiles: (string | null)[][] = Array.from(Array(size).keys()).map(() =>\n        Array.from(Array(size).keys()).map(() => null),\n    );\n    if (game !== null) {\n        game.moves.forEach((move) => (tiles[move.position.x][move.position.y] = move.letter));\n    }\n\n    const renderedTiles = tiles.map((row, x) => (\n        <div style={{ flexDirection: 'row' }} key={x}>\n            {row.map((tile, y) => (\n                <GameTile\n                    letter={tile}\n                    position={{ x, y }}\n                    isPlayable={isPlayable(tiles, { x, y })}\n                    isMostRecentlyPlayed={deepEqual(game?.moves[game.moves.length - 1]?.position, { x, y })}\n                    key={y}\n                />\n            ))}\n        </div>\n    ));\n\n    return (\n        <Draggable cancel=\".tile-input\">\n            <div style={{ display: 'flex' }}>{renderedTiles}</div>\n        </Draggable>\n    );\n};\n\nexport default GameBoard;\n","import { Button, Collapse, Icon, Intent, Tag } from '@blueprintjs/core';\nimport React, { useState } from 'react';\nimport Avatar from 'react-avatar';\nimport { isMobile } from 'react-device-detect';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\n\ntype PlayerProps = {\n    player: Player;\n    turnPlayer: boolean;\n    loser: boolean;\n    winner: boolean;\n};\n\nconst PlayerRow: React.FC<PlayerProps> = ({ player, turnPlayer, loser, winner }: PlayerProps) => {\n    const playerName = turnPlayer ? <b>{player.name}</b> : loser ? <s>{player.name}</s> : player.name;\n    const intent = turnPlayer ? Intent.PRIMARY : Intent.NONE;\n    const icon = winner ? <Icon icon=\"crown\" /> : null;\n    return (\n        <Tag\n            fill={true}\n            minimal={loser}\n            intent={intent}\n            large={true}\n            icon={<Avatar size=\"20\" round={true} src={player.imageUrl} />}\n        >\n            {icon}\n            {playerName}\n            {icon}\n        </Tag>\n    );\n};\n\nconst PlayersList: React.FC = () => {\n    const { game } = useSelector((state: RootState) => state.game);\n    const [expanded, setExpanded] = useState<boolean>(!isMobile);\n\n    const players = game\n        ? game.players.map((player, index) => {\n              const winner = game.winner !== null && game.winner.name === player.name;\n              return (\n                  <PlayerRow\n                      player={player}\n                      turnPlayer={player.name == game.turnPlayerName}\n                      loser={false}\n                      key={index}\n                      winner={winner}\n                  />\n              );\n          })\n        : [];\n\n    const losers = game\n        ? game.losers.map((player, index) => (\n              <PlayerRow player={player} turnPlayer={false} loser={true} key={index} winner={false} />\n          ))\n        : [];\n\n    return (\n        <div>\n            <Button\n                fill={true}\n                outlined={true}\n                text={<b>Players</b>}\n                rightIcon={expanded ? 'chevron-down' : 'chevron-left'}\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse isOpen={expanded}>\n                {players}\n                {losers}\n            </Collapse>\n        </div>\n    );\n};\n\nexport default PlayersList;\n","import { useParams } from 'react-router-dom';\n\nconst useRoomCode = (): string => useParams<{ roomCode: string }>().roomCode;\n\nexport default useRoomCode;\n","import React from 'react';\nimport { Button, Card, H5, Intent } from '@blueprintjs/core';\nimport useGame from '../hooks/useGame';\nimport useRoomCode from '../hooks/useRoomCode';\nimport { useDispatch } from 'react-redux';\nimport { startGame } from '../redux/games/actions';\n\nconst PreGameCard: React.FC = () => {\n    const roomCode = useRoomCode();\n    const { game } = useGame();\n    const dispatch = useDispatch();\n\n    const handleStartGame = () => {\n        if (game && !game.started) {\n            dispatch(startGame(roomCode));\n        }\n    };\n\n    return (\n        <Card elevation={2}>\n            <H5>Welcome to the game!</H5>\n            <p>The game has not started yet. Start the game when everyone has joined.</p>\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\n                <Button text=\"Everyone's in!\" intent={Intent.PRIMARY} onClick={handleStartGame} />\n            </div>\n        </Card>\n    );\n};\n\nexport default PreGameCard;\n","import { Alert, Spinner, SpinnerSize } from '@blueprintjs/core';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useInterval from 'react-useinterval';\nimport ChallengeButton from '../components/ChallengeButton';\nimport ChallengeIssuedDialog from '../components/ChallengeIssuedDialog';\nimport ChallengeResponseDialog from '../components/ChallengeResponseDialog';\nimport ChallengeVoteDialog from '../components/ChallengeVoteDialog';\nimport GameBoard from '../components/GameBoard';\nimport GhostNavbar from '../components/GhostNavbar';\nimport PlayersList from '../components/PlayersList';\nimport PreGameCard from '../components/PreGameCard';\nimport useGame from '../hooks/useGame';\nimport usePlayer from '../hooks/usePlayer';\nimport useRoomCode from '../hooks/useRoomCode';\nimport { createGame, fetchGameByRoomCode, joinGame, reloadGame, resetPolling } from '../redux/games/actions';\n\nimport './GamePage.css';\n\nconst POLLING_INTERVAL_MS = 1000;\nconst POLLING_TIMEOUT_MS = 5 * 60 * 1000;\n\nconst GamePage: React.FC = () => {\n    const roomCode = useRoomCode();\n    const { game, gameLoadStatus, joined, joinedRoomCode, latestAction } = useGame();\n    const player = usePlayer();\n    const dispatch = useDispatch();\n\n    // Poll game state - TODO extract into a polling alert hook\n    const [polling, setPolling] = useState(true);\n    useInterval(() => {\n        if (polling) dispatch(fetchGameByRoomCode(roomCode));\n    }, POLLING_INTERVAL_MS);\n    useEffect(() => {\n        setPolling(moment().diff(latestAction) < POLLING_TIMEOUT_MS);\n    }, [game, latestAction]);\n    const resetPollingAlert = (\n        <Alert\n            isOpen={!polling}\n            canOutsideClickCancel\n            onClose={() => {\n                dispatch(resetPolling());\n            }}\n            confirmButtonText=\"I'm still here!\"\n        >\n            <p>\n                {\"Are you still there? Polling has been paused because there hasn't been activity for \"}\n                {moment.duration(POLLING_TIMEOUT_MS, 'milliseconds').humanize()}.\n            </p>\n        </Alert>\n    );\n\n    if (joinedRoomCode && joinedRoomCode !== roomCode) {\n        dispatch(reloadGame());\n    }\n\n    if (game === null) {\n        switch (gameLoadStatus) {\n            case 'idle':\n                dispatch(fetchGameByRoomCode(roomCode));\n                break;\n            case 'gameDoesNotExist':\n                dispatch(createGame(roomCode));\n                break;\n        }\n    } else if (!joined && !game.started) {\n        if (player !== null && !joined && game && !game.started && gameLoadStatus !== 'joining') {\n            dispatch(joinGame({ roomCode, player }));\n        }\n    }\n\n    const spinner = (\n        <div\n            style={{\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translateX(-50%) translateY(-50%)',\n                msTransform: 'translateX(-50%) translateY(-50%)',\n            }}\n        >\n            <Spinner size={SpinnerSize.LARGE} />;\n        </div>\n    );\n    const inGame =\n        [...(game?.players || []), ...(game?.losers || [])].find((p) => p.name === player?.name) !== undefined;\n\n    const mainContent = game?.started ? <GameBoard /> : <PreGameCard />;\n\n    return (\n        <div>\n            <GhostNavbar roomCode={roomCode} />\n            <div className=\"with-sidebar\">\n                <div className=\"sidebar\">\n                    <PlayersList />\n                    <ChallengeButton />\n                </div>\n                <div className=\"not-sidebar\">\n                    <div className=\"game-page\">\n                        <div className=\"vertical-centering\">{inGame ? mainContent : spinner}</div>\n                    </div>\n                </div>\n            </div>\n            {resetPollingAlert}\n            <ChallengeResponseDialog />\n            <ChallengeIssuedDialog />\n            <ChallengeVoteDialog />\n        </div>\n    );\n};\n\nexport default GamePage;\n","import React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nimport JoinGamePage from './pages/JoinGamePage';\nimport GamePage from './pages/GamePage';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter basename=\"/\">\n                <Switch>\n                    <Route path=\"/\" exact component={JoinGamePage} />\n                    <Route path=\"/room/:roomCode\" component={GamePage} />\n\n                    <Redirect to=\"/\" />\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n};\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\nimport moment from 'moment';\nimport {\n    createGame,\n    fetchGameByRoomCode,\n    joinGame,\n    makeChallenge,\n    makeChallengeResponse,\n    makeChallengeVote,\n    makeMove,\n    reloadGame,\n    resetPolling,\n    startGame,\n} from './actions';\n\nconst INITIAL_STATE = {\n    game: null as Game | null,\n    gameLoadStatus: 'idle' as GameLoadStatus,\n    joined: false,\n    joinedRoomCode: null as string | null,\n    latestAction: moment(),\n};\nexport type GamesSliceState = typeof INITIAL_STATE;\n\nconst gamesSlice = createSlice({\n    name: 'games',\n    initialState: INITIAL_STATE,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(reloadGame, (state) => {\n            state.game = INITIAL_STATE.game;\n            state.gameLoadStatus = INITIAL_STATE.gameLoadStatus;\n            state.joined = INITIAL_STATE.joined;\n            state.joinedRoomCode = INITIAL_STATE.joinedRoomCode;\n            state.latestAction = moment();\n        });\n        builder.addCase(fetchGameByRoomCode.pending, (state) => {\n            state.gameLoadStatus = 'loading';\n        });\n        builder.addCase(fetchGameByRoomCode.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.gameLoadStatus = 'idle';\n        });\n        builder.addCase(fetchGameByRoomCode.rejected, (state, action) => {\n            state.game = null;\n            //state.gameLoadStatus = 'error';\n            state.gameLoadStatus = 'gameDoesNotExist'; // TEMP\n            if (action.payload) {\n                if (action.payload.statusCode == 404) {\n                    state.gameLoadStatus = 'gameDoesNotExist';\n                }\n            }\n        });\n        builder.addCase(createGame.pending, (state) => {\n            state.game = null;\n            state.gameLoadStatus = 'loading';\n            state.latestAction = moment();\n        });\n        builder.addCase(createGame.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.gameLoadStatus = 'idle';\n        });\n        builder.addCase(createGame.rejected, (state) => {\n            state.game = null;\n            state.gameLoadStatus = 'error';\n        });\n        builder.addCase(startGame.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.latestAction = moment();\n        });\n        builder.addCase(joinGame.pending, (state) => {\n            state.gameLoadStatus = 'joining';\n            state.joined = false;\n            state.joinedRoomCode = null;\n            state.latestAction = moment();\n        });\n        builder.addCase(joinGame.fulfilled, (state, action) => {\n            state.gameLoadStatus = 'idle';\n            state.joined = true;\n            state.game = action.payload;\n            state.joinedRoomCode = action.payload.roomCode;\n        });\n        builder.addCase(joinGame.rejected, (state) => {\n            state.gameLoadStatus = 'error';\n            state.joined = false;\n            state.joinedRoomCode = null;\n        });\n        builder.addCase(makeMove.pending, (state) => {\n            state.latestAction = moment();\n            // TODO\n        });\n        builder.addCase(makeMove.fulfilled, (state, action) => {\n            state.game = action.payload;\n        });\n        builder.addCase(makeChallenge.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.latestAction = moment();\n        });\n        builder.addCase(makeChallengeResponse.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.latestAction = moment();\n        });\n        builder.addCase(makeChallengeVote.fulfilled, (state, action) => {\n            state.game = action.payload;\n            state.latestAction = moment();\n        });\n        builder.addCase(resetPolling, (state) => {\n            state.latestAction = moment();\n        });\n    },\n});\n\nexport default gamesSlice;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { loginGuest, logOut } from './actions';\n\nconst playerSlice = createSlice({\n    name: 'player',\n    initialState: {\n        localPlayer: null as Player | null,\n        loginStatus: 'notLoggedIn' as LoginStatus,\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(logOut, (state) => {\n            state.localPlayer = null;\n            state.loginStatus = 'notLoggedIn';\n        });\n        builder.addCase(loginGuest.pending, (state) => {\n            state.loginStatus = 'loggingIn';\n        });\n        builder.addCase(loginGuest.rejected, (state) => {\n            state.loginStatus = 'notLoggedIn';\n        });\n        builder.addCase(loginGuest.fulfilled, (state, action) => {\n            state.localPlayer = action.payload;\n            state.loginStatus = 'loggedIn';\n        });\n    },\n});\n\nexport default playerSlice;\n","import { combineReducers } from 'redux';\nimport gamesSlice from './games/reducers';\nimport playerReducer from './player/reducers';\n\nconst rootReducer = combineReducers({\n    game: gamesSlice.reducer,\n    player: playerReducer.reducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst persistConfig = {\n    key: 'root',\n    storage: storage,\n    whitelist: ['player'],\n};\nconst pReducer = persistReducer<RootState>(persistConfig, rootReducer);\n\nconst store = createStore(pReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport store, { persistor } from './redux/store';\nimport { Spinner } from '@blueprintjs/core';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <PersistGate loading={<Spinner />} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}